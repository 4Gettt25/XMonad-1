;; Author: github.com/NeshHari

;;;;;;;;;;;;;;;;;;;;;;;; QUOTES ;;;;;;;;;;;;;;;;;;;;;;;;
(defpoll quote :interval "24h" "scripts/quotes --quote-and-quotee")

(defwidget quote []
	(box :class "quote-container" :orientation "v" :hexpand "false" :vexpand "true" :space-evenly "false"
        (button :style "background-image :url('images/quote.svg');" :class "quote-img" :halign "center") 
	    (label :class "quote" :halign "center" :wrap "true" :limit-width 300 :text quote :xalign "0.5")))

(defwidget quotetoggler []
      (box :class "bar-quote" :tooltip "Quote" :space-evenly "false"
          (button :class "btn-quote" :onclick "scripts/customtoggle.sh showquote" "" )
          (label  :class "btn-quote-label" :text "QUOTE")))

(defwindow quotetoggler
    :stacking "fg"
    :windowtype "dock"
	:geometry (geometry :x "8.5%"
                        :y "0.75%"
                        :height "2.5%")
(quotetoggler))

(defwindow showquote
    :stacking "fg"
	:geometry (geometry :x "8.5%"
                        :y "4%"
                        :width "10%")
(quote))

;;;;;;;;;;;;;;;;;;;;;;;; CALENDAR ;;;;;;;;;;;;;;;;;;;;;;;;
(defpoll calendar_day :interval "10h" "date '+%d'")
(defpoll calendar_year :interval "10h" "date '+%Y'")
(defpoll calendar_date :interval "24h" "date '+%A, %d %B'")

(defwidget cal []
	(box :class "cal-container" 
	(box :class "cal-inner"
	(calendar :class "cal-inner-elems" 
			  :day calendar_day 
			  :year calendar_year))))

(defwidget fullcal[]
  (box :orientation "v" :space-evenly "false" :class "cal-outer-container"
    (box :class "cal-date" "${calendar_date}")
    (cal)
  )
)

(defvar time-visible false)

(defpoll time :interval "60s"
              :initial "initial-value" 
              :run-while time-visible 
  `date +%H:%M' '%p`)

(defwindow mycal
    :stacking "fg"
	:geometry (geometry :x "80.5%" 
						:y "64.5%" 
						:width "380px" 
						:height "20px")
(fullcal))

;;;;;;;;;;;;;;;;;;;;;;;; SPOTIFY ;;;;;;;;;;;;;;;;;;;;;;;;

(defpoll spotify :interval "1s" "scripts/spotify.py")
(defpoll playpause :interval "0.5s"  "scripts/playpause --icon")
(defpoll songtitle :interval "0.5s" "scripts/playpause --status")
(defpoll singer :interval "0.5s" "scripts/artist")
(defpoll album :interval "0.5s" "scripts/album")
(defpoll coverart :interval "0.5s" "scripts/coverart --art")

(defwidget spotify []
  (box :class "spotify-container" :orientation "h" :space-evenly "true"
    (box :class "spotify-img" :style "background-image: url('${coverart}');")
    (box :class "spotify-inner-right-container" :orientation "v" :valign "center" :halign "center" :space-evenly "false" 
      (box :orientation "v" :spacing 20
        (label :class "spotify-title" :text "${songtitle}" :limit-width "24")
        (label :class "spotify-singer" :text "~ ${singer} ~" :limit-width "20")
        (label :class "spotify-album" :text "${album}" :limit-width "20")
      )
      (box :class "spotify-controls" :orientation "h" :halign "center" :space-evenly "false" :spacing 30
        (button :onclick "playerctl previous" "󰒮")
        (button :onclick "playerctl -p spotify play-pause" "${playpause}")
        (button :onclick "playerctl -p spotify next" "󰒭")
      )
    )
  )
)

(defwindow spotify
    :stacking "fg"
	:geometry (geometry :x "38%"
						:y "74%" 
						)
(spotify))

;;;;;;;;;;;;;;;;;;; POWER MENU ;;;;;;;;;;;;;;;;;;;
(defwidget poweroptions []
  (box :class "powermenu-container" :orientation "v" :spacing 0
    (box :class "powermenu-inner-container" :orientation "h" :spacing 30
      (button :class "lock" :onclick "betterlockscreen -l dim" "")
      (button :class "logout" :onclick "pkill xmonad" "")
      (button :class "suspend" :onclick "systemctl suspend" ""))
    (box :class "powermenu-inner-container" :orientation "h" :spacing 30
      (button :class "restart" :onclick "reboot" "")
      (button :class "shutdown" :onclick "shutdown -h now" "")
    )))

(defwindow powermenu
    :stacking "fg"
	:geometry (geometry :x "91.4%"
						:y "86%" 
						:width "8%"
                        :height "8%")
    (poweroptions)
)

(defpoll xmonad-layout :interval "1s" `scripts/xmonad_layout`)

(defwidget currentlayout []
	(box :class "xmonad-layout-container" :orientation "h"
		(label :halign "center" :limit-width 5 :text xmonad-layout)))


(defpoll wmclass :interval "1s" `scripts/get_wm_class`)

;;;;;;;;;;;;;;;;;;;;;;;;;;; VOLUME ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defpoll volume :interval "1s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%' | head -1")

(defwidget showvol []
  (box :class "metric" 
       :orientation "h" 
       :space-evenly "false"
       :spacing "8"
       :tooltip volume
    (button :onclick "amixer -D pulse set Master 1+ toggle" "")
    (scale :min 0
           :max 100
           :value volume
           :onchange "amixer -D pulse sset Master {}%"
    )
  )
)

(defwindow showvolume
    :stacking "fg"
    :geometry (geometry :x "92.8%"
                        :y "0.75%" 
                        :width "5%" 
                        :height "2.5%")
(showvol))


(defpoll wifi-signal :interval "10s" "nmcli -f IN-USE,SIGNAL,SSID device wifi | awk '/^\*/{if (NR!=1) {print $2}}'")

(defwidget showwifi []
  (box :class "metric"
       :orientation "h"
       :space-evenly "false"
       :active "false"
      (box "")
      (scale :min 0
             :max 100
             :active "false"
             :value {wifi-signal != "" ? wifi-signal : "0.0"}
      )
  )
)           

(defpoll ram :interval "3s" "printf $(free -m | grep Mem | awk '{print ($3/$2)*100}')")

(defwidget showmemory []
  (box :class "metric"
       :orientation "h"
       :space-evenly "false"
       :active "false"
       :spacing 4
      (box "")
      (scale :min 0
             :max 100
             :value ram
      )
  )
)           

(defpoll cpu :interval "3s" "top -b -n 1 | grep 'Cpu(s)' | awk '{print $2}'")

(defwidget showcpu []
  (box :class "metric"
       :orientation "h"
       :space-evenly "false"
       :active "false"
       :spacing 5
      (box "")
      (scale :min 0
             :max 100
             :value cpu
      )
  )
)           

(defwidget sysdata []
  (box :class "metric"
       :orientation "v"
       :space-evenly "false"
       (showwifi)
       (showcpu)
       (showmemory)
  )
)           

(defwindow showsysdata
    :stacking "fg"
	:geometry (geometry :x "91%"
                        :y "86%"
                        :height "8%")
(sysdata))

(defpoll upd :interval "1h" "paru -Qu 2>/dev/null | wc -l")

(defwidget applications []
  (box :orientation "v" :space-evenly "false" :class "app-outer-container"
    (box :orientation "v" :space-evenly "false" :class "app-inner-container" :vexpand "false" :hexpand "false" :valign "center" :spacing 40
    (box :orientation "h" :space-evenly "false" :class "app-inner-container-top" :vexpand "false" :hexpand "false" :valign "center" :spacing 24
      (button :tooltip "Launch Edge" :style "background-image :url('images/edge.svg');" :class "edge" :onclick "scripts/applauncher.sh --edge")
      (button :tooltip "Launch Terminal" :style "background-image :url('images/kitty.svg');" :class "kitty" :onclick "scripts/applauncher.sh --kitty")
      (button :tooltip "Launch Thunar" :style "background-image :url('images/files.svg');" :class "thunar" :onclick "scripts/applauncher.sh --files"))
    (box :orientation "h" :space-evenly "false" :class "app-inner-container-bottom" :vexpand "false" :hexpand "false" :valign "center" :spacing 24
      (button :tooltip "Launch Spotify" :style "background-image :url('images/spotify.svg');" :class "spotify" :onclick "scripts/applauncher.sh --spotify")
      (button :tooltip "Launch Discord" :style "background-image :url('images/discord.svg');" :class "discord" :onclick "scripts/applauncher.sh --discord")
      (button :tooltip "Launch GitHub" :style "background-image :url('images/git.svg');" :class "git" :onclick "scripts/applauncher.sh --git")))))

(defwindow applications
    :stacking "fg"
	:geometry (geometry :x "0.5%"
                        :y "83.5%"
                        :height 150)
(applications))


(defpoll btstatus :interval "3s" `scripts/checkbluetoothstatus.sh`)
(defpoll btdevice :interval "5s" `scripts/checkbluetoothdevice.sh`)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; BAR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget bar []
  (box :orientation "h" :class "bar" :space-evenly "true"  :vexpand "false" :hexpand "false" :valign "center"
    (box :orientation "h" :space-evenly "false" :class "left-of-bar"
      (box :class "bar-launcher" :halign "center" :tooltip "Applications"
          (button :class "btn-launcher" :onclick "scripts/customtoggle.sh applications" "" ))
      (box :class "bar-search" :halign "center" :tooltip "Search Engines"
          (button :class "btn-search" :onclick "scripts/search.sh &" "" ))
      (box :class "bar-layout" :halign "center" :tooltip "Layout"
          (button :class "btn-layout"
      	      (label :class "label-layout" :halign "center" :limit-width 5 :text xmonad-layout)))
	  (box :class "bar-wmclass" :hexpand "true" :tooltip "${wmclass}"
          (button :class "btn-wmclass"
	        (label :class "label-wmclass" :halign "start" :text "${wmclass}" :limit-width 30 :show-truncated "true" ))))
    (box :orientation "h" :space-evenly "false" :class "middle-of-bar" :hexpand "true" :vexpand "false" :valign "center" :halign "center"
      (box :class "bar-spotify"
          (button :class "btn-spotify" :onclick "scripts/customtoggle.sh spotify" "${spotify}" )))
    (box :orientation "h" :space-evenly "false" :class "right-of-bar" :hexpand "false" :vexpand "false" :valign "center" :halign "end"
      (box :class "bar-time" 
        (button :class "btn-time" :onclick "scripts/customtoggle.sh mycal" "${time}"))
      (box :class "bar-update" :space-evenly "false"
        (box :class "bar-update-left"
          (button :class "btn-update" :onclick "scripts/update.sh" :tooltip "${upd} updates available"
            (label :class "label-update" :halign "center" :text "")))
        (box :class "bar-update-right"
          (button :class "btn-update-num" :onclick "scripts/update.sh" :tooltip "${upd} updates available"
            (label :class "label-update" :halign "center" :text "${upd}"))))
      (box :class "bar-bluetooth"
        (box :class "bar-bluetooh-left"
          (button :class "btn-bluetooth" :onclick "scripts/bluetooth.sh" :tooltip "${btdevice}"
            (label :class "label-bluetooth" :halign "center" :text "")))
        (box :class "bar-bluetooth-right"
          (button :class "btn-bluetooth-status" :onclick "scripts/bluetooth.sh" :tooltip "${btdevice}"
            (label :class "label-bluetooth" :halign "center" :text "${btstatus}"))))
      (box :class "bar-sysdata" :tooltip "System Resources"
        (button :class "btn-sysdata" :onclick "scripts/customtoggle.sh showsysdata" "" ))
      (box :class "bar-power"
        (button :class "btn-power" :onclick "scripts/customtoggle.sh powermenu" "" ))
    )))


(defwindow bar
    :stacking "fg"
    :windowtype "dock"
	:geometry (geometry :x "1.35%"
                        :y "96%"
                        :width "97.3%"
                        )
    :reserve (struts :side "bottom" :distance "3.8%")
(bar))

(defwidget mynotifications []
  (box :class "bar-notifications" :space-evenly "false"
     (button :class "btn-notifications" :onclick "scripts/customtoggle.sh notifications" "" )
     (label  :class "btn-notifications-label" :text "NOTIFICATIONS")))

(defwindow mynotifications
    :stacking "fg"
	:geometry (geometry :x "1.35%"
                        :y "0.75%"
                        :height "2.5%")
(mynotifications))

;;;;;;;;;;;;;;;;;;;;;;;;;;;; NOTIFICAITONS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Variables
(defpoll notifications_stats :interval "5s" "scripts/logger.py stats")
(deflisten notications_scroll_pane "scripts/logger.py subscribe")
(defpoll notifications_dnd_state :interval "1s" "dunstctl is-paused")
(defpoll dunst_displayed :interval "10s" "dunstctl count displayed")
(defpoll dunst_history :interval "10s" "dunstctl count history")
(defpoll dunst_waiting :interval "10s" "dunstctl count waiting")

;; Widgets
(defwidget dnd [total total_label label dnd_icon state action]
  (box :vexpand false
    :hexpand true
    :class "notifications-dnd-box"
    :space-evenly false
    (box :class "notifications-dnd-labels"
      :hexpand true
      :orientation "h"
      :space-evenly false
      (label :class "dnd-icon-label" :text dnd_icon)
      (label :halign "start"
        :class "notifications-dnd-header"
      :text label)
      (label :halign "start"
      :class "notifications-dnd-footer")
      (box :halign "center"
        :valign "center"
        :orientation "vertical"
        :vexpand true
        :class "notifications-dnd-box-inner"
      :space-evenly false)
      (button :onclick action
        :vexpand true
        :halign "end"
        :valign "end"
      :class "notifications-dnd-toggle notifications-dnd-toggle-${state}" state))))


(defwidget notifications_layout []
  (box :orientation "v" :space-evenly "false" :class "notifications-container"
    (box :class "notifications-header-container" :space-evenly "true" :orientation "v"
      (label :text "NOTIFICATIONS" :class "notifications-header" :hexpand true :halign "center"))
    (scroll :hscroll false :vscroll true :vexpand "true" :hexpand "true" :class "notifications-scroll"
      (literal :content notications_scroll_pane))
      (box :class "notifications-footer" :space-evenly "true" :orientation "h"
        (button :onclick "scripts/combine.sh cls" :class "notifications-clear-container" "CLEAR ALL")
        (button :onclick "eww close notifications" :class "notifications-close-container" "CLOSE"))))

(defwidget cardimage [summary body ?limit_summary ?limit_body appname icon icon_width icon_height close ?close_action image image_width image_height timestamp urgency]
  (eventbox :class "notifications-cardimage-eventbox notifications-cardimage-eventbox-${urgency}"
    (box :orientation "vertical"
      :space-evenly false
      :class "notifications-cardimage-container-box notifications-cardimage-container-box-${urgency}"
      (box :class "notifications-cardimage-summary-box notifications-cardimage-summary-box-${urgency}"
        :space-evenly false
        :spacing 6
        (label :text appname
          :hexpand true
          :halign "start"
        :class "notifications-cardimage-appname-label notifications-cardimage-appname-label-${urgency}")
        (button :class "notifications-cardimage-close-button notifications-cardimage-close-button-${urgency}"
          :onclick close_action
          :timeout "2s"
          (label :text close
          :class "notifications-cardimage-close-icon notifications-cardimage-close-icon-${urgency}")))
      
      (box :class "notifications-cardimage-separator notifications-cardimage-separator-${urgency}"
      :space-evenly false)
      
      (box :class "notifications-cardimage-body-box notifications-cardimage-body-box-${urgency}"
        :space-evenly false
        (box :halign "center"
          :valign "center"
          :class "notifications-cardimage-image-box notifications-cardimage-image-box-${urgency}"
          (box :style "background-image: url('${image}')"
            :hexpand false
            :vexpand false
            :width image_width
            :height image_height
            :space-evenly false
          :class "notifications-cardimage-image notifications-cardimage-image-${urgency}"))
        
        (box :hexpand true
          :vexpand true
          :valign "center"
          :orientation "vertical"
          :spacing 5
          :class "notifications-cardimage-body-outer notifications-cardimage-body-outer-${urgency}"
          :space-evenly false
          (label :text summary
            :limit-width "${limit_summary != "" ? limit_summary : 25}"
            :halign "start"
          :class "notifications-cardimage-summary-label notifications-cardimage-summary-label-${urgency}")
          (label :text body
            :halign "start"
            :limit-width "${limit_body != "" ? limit_body : 110}"
            :xalign 0.0
            :wrap true
          :class "notifications-cardimage-body-label notifications-cardimage-body-${urgency}")
          (label :text timestamp
            :halign "end"
          :class "notifications-cardimage-timestamp notifications-cardimage-timestamp-${urgency}"))))))

(defwidget cardprog [summary body ?limit_summary ?limit_body appname icon icon_width icon_height close ?close_action image image_width image_height timestamp urgency progress]
  (eventbox :class "notifications-cardprog-eventbox notifications-cardprog-eventbox-${urgency}"
    (box :orientation "vertical"
      :space-evenly false
      :class "notifications-cardprog-container-box notifications-cardprog-container-box-${urgency}"
      (box :class "notifications-cardprog-summary-box notifications-cardprog-summary-box-${urgency}"
        :space-evenly false
        :spacing 6
        (label :text appname
          :hexpand true
          :halign "start"
        :class "notifications-cardprog-appname-label notifications-cardprog-appname-label-${urgency}")
        (button :class "notifications-cardprog-close-button notifications-cardprog-close-button-${urgency}"
          :onclick close_action
          :timeout "2s"
          (label :text close
          :class "notifications-cardprog-close-icon notifications-cardprog-close-icon-${urgency}")))
      (box :class "notifications-cardprog-separator notifications-cardprog-separator-${urgency}"
      :space-evenly false)
      (box :class "notifications-cardprog-body-box notifications-cardprog-body-box-${urgency}"
        :space-evenly false
        (box :halign "center"
          :valign "center"
          :class "notifications-cardprog-image-box notifications-cardprog-image-box-${urgency}"
          (box :style "background-image: url('${image}')"
            :hexpand false
            :vexpand false
            :width image_width
            :height image_height
            :space-evenly false
          :class "notifications-cardprog-image notifications-cardprog-image-${urgency}"))
        (box :spacing 1
          :hexpand true
          :vexpand true
          :valign "center"
          :orientation "vertical"
          :class "notifications-cardprog-body-outer notifications-cardprog-body-outer-${urgency}"
          :space-evenly false
          (box :class "notifications-cardprog-summary-body-box notifications-cardprog-summary-body-box-${urgency}"
            (label :limit-width "${limit_summary != "" ? limit_summary : 25}"
              :text summary
              :halign "start"
            :class "notifications-cardprog-summary-label notifications-cardprog-summary-label-${urgency}")
            (label :text timestamp
              :halign "end"
            :class "notifications-cardprog-timestamp notifications-cardprog-timestamp-${urgency}"))
          (label :limit-width "${limit_body != "" ? limit_body : 110}"
            :text body
            :halign "start"
            :wrap true
            :xalign 0.0
          :class "notifications-cardprog-body-label notifications-cardprog-body-${urgency}")
          (box :spacing 15
            :class "notifications-cardprog-scale-box notifications-cardprog-scale-box-${urgency}"
            :space-evenly false
            (scale :hexpand true
              :class "notifications-cardprog-scale notifications-cardprog-scale-${urgency}"
              :min 0
              :max 100
              :active false
            :value progress)
            (label :class "notifications-cardprog-value-label notifications-cardprog-value-label-${urgency}"
            :text progress)))))))

(defwidget cardradial [ summary body ?limit_summary ?limit_body appname close ?close_action timestamp urgency progress thickness total done]
  (eventbox :class "notifications-cardradial-eventbox notifications-cardradial-eventbox-${urgency}"
    (box :orientation "vertical"
      :space-evenly false
      :class "notifications-cardradial-container-box notifications-cardradial-container-box-${urgency}"
      (box :class "notifications-cardradial-summary-box notifications-cardradial-summary-box-${urgency}"
        :space-evenly false
        (label :text appname
          :hexpand true
          :halign "start"
        :class "notifications-cardradial-appname-label notifications-cardradial-appname-label-${urgency}")
        (button :class "notifications-cardradial-close-button notifications-cardradial-close-button-${urgency}"
          :onclick close_action
          :timeout "2s"
          (label :text close
          :class "notifications-cardradial-close-icon notifications-cardradial-close-icon-${urgency}")))
      (box :class "notifications-cardradial-separator notifications-cardradial-separator-${urgency}"
      :space-evenly false)
      (box :class "notifications-cardradial-body-box notifications-cardradial-body-box-${urgency}"
        :space-evenly false
        (box :halign "center"
          :valign "center"
          :class "notifications-cardradial-circle-box notifications-cardradial-circle-box-${urgency}"
          (circular-progress :value progress
            :thickness thickness
            :class "notifications-cardradial-circle notifications-cardradial-circle-${urgency}"
            (label :class "notifications-cardradial-tasks notifications-cardradial-tasks-${urgency}"
            :text "${done}/${total}")))
        (box :hexpand true
          :vexpand true
          :valign "center"
          :spacing 5
          :orientation "vertical"
          :class "notifications-cardradial-body-outer notifications-cardradial-body-outer-${urgency}"
          :space-evenly false
          (label :limit-width "${limit_summary != "" ? limit_summary : 25}"
            :text summary
            :halign "start"
          :class "notifications-cardradial-summary-label notifications-cardradial-summary-label-${urgency}")
          (label :limit-width "${limit_body != "" ? limit_body : 110}"
            :text body
            :xalign 0.0
            :halign "start"
            :wrap true
          :class "notifications-cardradial-body-label notifications-cardradial-body-${urgency}")
          (label :text timestamp
            :halign "end"
          :class "notifications-cardradial-timestamp notifications-cardradial-timestamp-${urgency}"))))))

(defwidget cardscr [ summary ?limit_summary close ?close_action image image_width image_height timestamp urgency delete open]
  (eventbox :class "notifications-cardscr-eventbox notifications-cardscr-eventbox-${urgency}"
    (box :orientation "vertical"
      :space-evenly false
      :class "notifications-cardscr-container-box notifications-cardscr-container-box-${urgency}"
      (box :space-evenly false
        :class "notifications-cardscr-summary-box notifications-cardscr-summary-box-${urgency}"
        (label :hexpand true
          :limit-width "${limit_summary != "" ? limit_summary : 25}"
          :halign "start"
          :class "notifications-cardscr-summary-label notifications-cardscr-summary-label-${urgency}"
        :text summary)
        (label :class "notifications-cardscr-timestamp notifications-cardscr-timestamp-${urgency}"
        :text timestamp)
        (button :class "notifications-cardscr-close-button notifications-cardscr-close-button-${urgency}"
          :onclick close_action
          :timeout "2s"
          (label :text close
          :class "notifications-cardscr-close-icon notifications-cardscr-close-icon-${urgency}")))
      (box :class "notifications-cardscr-image"
        :style "background-image: url('${image}')"
        :width image_width
        :height image_height
      :space-evenly false)
      (box :spacing 20
        :space-evenly true
        :class "notifications-cardscr-action-box notifications-cardscr-action-box-${urgency}"
        :hexpand true
        :halign "center"
        (button :class "notifications-cardscr-open-button notifications-cardscr-open-button-${urgency}"
          :onclick open :timeout "2s"
          (label :text "Open"
          :class "notifications-cardscr-open-label notifications-cardscr-open-label-${urgency}"))
        (button :class "notifications-cardscr-delete-button notifications-cardscr-delete-button-${urgency}"
          :onclick delete :timeout "2s"
          (label :text "Delete"
          :class "notifications-cardscr-delete-label notifications-cardscr-delete-label-${urgency}"))))))

(defwindow notifications :stacking "fg" 
  :stacking "fg"
  :wm-ignore true
  :geometry (geometry :x "1%" :width "24%" :height "60%" :anchor "left center")
  (notifications_layout))

